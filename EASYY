-- Military Style Auto Magazine Modifier Script
-- This script automatically modifies magazine values with persistent UI that recreates on death

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- Configuration
local TARGET_MAGAZINE_VALUE = 999999999999999999
local CHECK_INTERVAL = 2
local modifiedGuns = {}
local totalModified = 0
local isAutoEnabled = true

-- UI Variables (will be recreated on death)
local screenGui
local mainFrame
local statusLabel
local toggleButton
local manualButton

-- Create the military-style GUI
local function createGUI()
    -- Remove existing GUI if it exists
    if screenGui then
        screenGui:Destroy()
    end
    
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Create main ScreenGui
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MilitaryMagazineModifier"
    screenGui.ResetOnSpawn = false -- This prevents UI from disappearing on death
    screenGui.Parent = playerGui

    -- Main Frame (military style)
    mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 320, 0, 180)
    mainFrame.Position = UDim2.new(0, 20, 0, 100)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    mainFrame.BorderSizePixel = 3
    mainFrame.BorderColor3 = Color3.fromRGB(80, 80, 80)
    mainFrame.Parent = screenGui

    -- Add corner radius for modern look
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame

    -- Header bar (like the weapon selection UI)
    local headerBar = Instance.new("Frame")
    headerBar.Size = UDim2.new(1, 0, 0, 35)
    headerBar.Position = UDim2.new(0, 0, 0, 0)
    headerBar.BackgroundColor3 = Color3.fromRGB(120, 30, 30) -- Military red
    headerBar.BorderSizePixel = 0
    headerBar.Parent = mainFrame

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 8)
    headerCorner.Parent = headerBar

    -- Fix corner clipping
    local headerFix = Instance.new("Frame")
    headerFix.Size = UDim2.new(1, 0, 0, 8)
    headerFix.Position = UDim2.new(0, 0, 1, -8)
    headerFix.BackgroundColor3 = Color3.fromRGB(120, 30, 30)
    headerFix.BorderSizePixel = 0
    headerFix.Parent = headerBar

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -10, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "AUTO MAGAZINE MODIFIER"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = headerBar

    -- Weapon info section (like the weapon cards)
    local weaponSection = Instance.new("Frame")
    weaponSection.Size = UDim2.new(1, -20, 0, 60)
    weaponSection.Position = UDim2.new(0, 10, 0, 45)
    weaponSection.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    weaponSection.BorderSizePixel = 1
    weaponSection.BorderColor3 = Color3.fromRGB(70, 70, 70)
    weaponSection.Parent = mainFrame

    local weaponCorner = Instance.new("UICorner")
    weaponCorner.CornerRadius = UDim.new(0, 4)
    weaponCorner.Parent = weaponSection

    -- Status label (styled like weapon stats)
    statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -10, 1, -10)
    statusLabel.Position = UDim2.new(0, 5, 0, 5)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "AUTO MODE: Monitoring for new weapons..."
    statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    statusLabel.TextWrapped = true
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextSize = 13
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.TextYAlignment = Enum.TextYAlignment.Top
    statusLabel.Parent = weaponSection

    -- Button container
    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(1, -20, 0, 50)
    buttonContainer.Position = UDim2.new(0, 10, 0, 115)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = mainFrame

    -- Toggle Button (military style)
    toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 85, 0, 30)
    toggleButton.Position = UDim2.new(0, 0, 0, 0)
    toggleButton.BackgroundColor3 = Color3.fromRGB(60, 140, 60)
    toggleButton.Text = "DISABLE"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.Parent = buttonContainer

    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 4)
    toggleCorner.Parent = toggleButton

    -- Manual Check Button
    manualButton = Instance.new("TextButton")
    manualButton.Size = UDim2.new(0, 85, 0, 30)
    manualButton.Position = UDim2.new(0, 95, 0, 0)
    manualButton.BackgroundColor3 = Color3.fromRGB(60, 100, 140)
    manualButton.Text = "CHECK NOW"
    manualButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    manualButton.TextScaled = true
    manualButton.Font = Enum.Font.SourceSansBold
    manualButton.Parent = buttonContainer

    local manualCorner = Instance.new("UICorner")
    manualCorner.CornerRadius = UDim.new(0, 4)
    manualCorner.Parent = manualButton

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 60, 0, 30)
    closeButton.Position = UDim2.new(0, 190, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(140, 60, 60)
    closeButton.Text = "CLOSE"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = buttonContainer

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeButton

    -- Make the GUI draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil

    headerBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)

    headerBar.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    headerBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Connect button events
    connectButtonEvents(toggleButton, manualButton, closeButton)
end

-- Function to modify magazines (optimized version)
local function modifyMagazines()
    local backpack = player.Backpack
    if not backpack then return 0 end
    
    local newModifications = 0
    
    -- Check backpack guns
    for _, item in pairs(backpack:GetChildren()) do
        local itemId = item:GetDebugId()
        
        if not modifiedGuns[itemId] then
            local varsFolder = item:FindFirstChild("Vars")
            if varsFolder then
                local magazineValue = varsFolder:FindFirstChild("magazine")
                if magazineValue and (magazineValue:IsA("NumberValue") or magazineValue:IsA("IntValue")) then
                    magazineValue.Value = TARGET_MAGAZINE_VALUE
                    modifiedGuns[itemId] = true
                    newModifications = newModifications + 1
                    print("Auto-modified magazine for: " .. item.Name)
                end
            end
        end
    end
    
    -- Check equipped gun (in character)
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            local itemId = item:GetDebugId()
            
            if not modifiedGuns[itemId] and item:IsA("Tool") then
                local varsFolder = item:FindFirstChild("Vars")
                if varsFolder then
                    local magazineValue = varsFolder:FindFirstChild("magazine")
                    if magazineValue and (magazineValue:IsA("NumberValue") or magazineValue:IsA("IntValue")) then
                        magazineValue.Value = TARGET_MAGAZINE_VALUE
                        modifiedGuns[itemId] = true
                        newModifications = newModifications + 1
                        print("Auto-modified equipped gun: " .. item.Name)
                    end
                end
            end
        end
    end
    
    return newModifications
end

-- Update status display
local function updateStatus(message, color)
    if statusLabel then
        statusLabel.Text = message
        statusLabel.TextColor3 = color or Color3.fromRGB(200, 200, 200)
    end
end

-- Connect button events
function connectButtonEvents(toggle, manual, close)
    -- Toggle functionality
    toggle.MouseButton1Click:Connect(function()
        isAutoEnabled = not isAutoEnabled
        
        if isAutoEnabled then
            toggle.Text = "DISABLE"
            toggle.BackgroundColor3 = Color3.fromRGB(60, 140, 60)
            updateStatus("AUTO MODE: Enabled - Monitoring for weapons...", Color3.fromRGB(100, 255, 100))
        else
            toggle.Text = "ENABLE"
            toggle.BackgroundColor3 = Color3.fromRGB(140, 140, 60)
            updateStatus("AUTO MODE: Disabled", Color3.fromRGB(255, 150, 0))
        end
    end)

    -- Manual check button
    manual.MouseButton1Click:Connect(function()
        local newMods = modifyMagazines()
        totalModified = totalModified + newMods
        
        if newMods > 0 then
            updateStatus("MANUAL CHECK: Modified " .. newMods .. " weapon(s)!\nTotal modified: " .. totalModified, Color3.fromRGB(100, 255, 100))
        else
            updateStatus("MANUAL CHECK: No new weapons to modify.\nTotal modified: " .. totalModified, Color3.fromRGB(255, 200, 100))
        end
    end)

    -- Close button
    close.MouseButton1Click:Connect(function()
        if screenGui then
            screenGui:Destroy()
        end
    end)
end

-- Auto-check variables
local lastCheckTime = 0

-- Main auto-check function
local function autoCheck()
    if not isAutoEnabled then return end
    
    local currentTime = tick()
    if currentTime - lastCheckTime >= CHECK_INTERVAL then
        lastCheckTime = currentTime
        
        local newMods = modifyMagazines()
        totalModified = totalModified + newMods
        
        if newMods > 0 then
            updateStatus("AUTO MODE: Modified " .. newMods .. " new weapon(s)!\nTotal modified: " .. totalModified, Color3.fromRGB(100, 255, 100))
        else
            updateStatus("AUTO MODE: Monitoring for new weapons...\nTotal modified: " .. totalModified, Color3.fromRGB(150, 200, 150))
        end
    end
end

-- Event handlers
local function onItemAdded(item)
    if isAutoEnabled then
        wait(0.1)
        local newMods = modifyMagazines()
        if newMods > 0 then
            totalModified = totalModified + newMods
            updateStatus("AUTO MODE: New weapon detected and modified!\nTotal modified: " .. totalModified, Color3.fromRGB(100, 255, 100))
        end
    end
end

local function onCharacterAdded(character)
    if isAutoEnabled then
        modifiedGuns = {}
        
        wait(2)
        local newMods = modifyMagazines()
        totalModified = totalModified + newMods
        
        updateStatus("AUTO MODE: Character respawned, checking weapons...\nTotal modified: " .. totalModified, Color3.fromRGB(100, 255, 100))
        
        -- Connect to new backpack
        local backpack = player:WaitForChild("Backpack")
        backpack.ChildAdded:Connect(onItemAdded)
        
        -- Connect to character for equipped items
        character.ChildAdded:Connect(function(child)
            if child:IsA("Tool") then
                onItemAdded(child)
            end
        end)
    end
end

-- Initialize the script
local function initialize()
    -- Create GUI
    createGUI()
    
    -- Set up character events
    if player.Character then
        onCharacterAdded(player.Character)
    end
    player.CharacterAdded:Connect(onCharacterAdded)
    
    -- Connect backpack events if backpack already exists
    if player.Backpack then
        player.Backpack.ChildAdded:Connect(onItemAdded)
    end
    
    -- Main loop
    RunService.Heartbeat:Connect(autoCheck)
    
    -- Initial check
    modifyMagazines()
end

-- Start the script
initialize()
